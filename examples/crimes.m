%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\Github\Conformal-Lasso\examples\communities.data
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/04 13:23:01

%% Initialize variables.
filename = 'communities.data';
delimiter = ',';

%% Format string for each line of text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
communities = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Initialize variables.
filename = 'communitiesnames.names';
delimiter = ' ';

%% Format string for each line of text:
%   column2: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
communitiesnames = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

% set up diary
% t=randi(100);
t=0;
folder = fullfile(pwd, '\Outputs');
filename = sprintf('crimerates_%d.txt',t);
fileID = fopen(fullfile(folder, filename),'w');
fileID=1; % change output here.
rng(t);

% set up data

communitiesnames = communitiesnames(6:end);
communities = communities(:,2:end);
data = communities;
data=data(:,~any(isnan(data)));

Ytot = (data(:,end)-0.5)*2;
Xtot = data(:,1:end-1);
Xtot = (Xtot-0.5)*2;
[M,p]=size(Xtot);
% m=294;
% 
% train = randsample(1:M,m);
% Xtrain = Xtotal(train,:);
% Ytrain = Ytotal(train);
% 
% test = setxor(1:M,train);
% Xtest = Xtotal(test,:);
% Ytest = Ytotal(test);

% test the data
incounter1 = 0;incounter2 = 0;
L1 = []; U1 = [];
L2 = []; U2 = [];

test = randsample(1:M,500);
for i=1:500
    
    xnew = Xtot(test(i),:);
    train = setxor(1:M,test(i));
    train = randsample(train,500);
    Xtrain = Xtot(train,:);
    Ytrain = Ytot(train);    
    
    X_withnew = [Xtrain;xnew];
    y = Ytot(test(i));
    ytrial = -1:0.01:1;   
    
    [yconf1,ms1,~] = conformalLOO(Xtrain,Ytrain,xnew,.1,ytrial,26.95);
    [yconf2,~,~] = conformal(Xtrain,Ytrain,xnew,.1,'linear',ytrial);
    fprintf(fileID,'Prediction interval: LOO: [%.2f,%.2f] OLS:[%.2f, %.2f]\n',...
        min(yconf1)/2+0.5,max(yconf1)/2+0.5,...
        min(yconf2)/2+0.5,max(yconf2)/2+0.5);
    if (min(yconf1)<=y)&&(y<=max(yconf1))
        incounter1=incounter1+1;
        fprintf(fileID,'Real data is LOO: IN  ');
    else
        fprintf(fileID,'Real data is LOO: OUT  ');
    end
    if (min(yconf2)<=y)&&(y<=max(yconf2))
        incounter2=incounter2+1;
        fprintf(fileID,'OLS: IN\n');
    else
        fprintf(fileID,'OLS: OUT\n');
    end
    L1 = [L1 min(yconf1)/2+0.5];
    U1 = [U1 max(yconf1)/2+0.5];
    L2 = [L2 min(yconf2)/2+0.5];
    U2 = [U2 max(yconf2)/2+0.5];
    disp(i/500);
% %     [yconf,modelsize,sc] = conformalLTSLassoAllSupp(Xtrain,Ytrain,xnew,.1,ytrial,0.2,0.8);
%     [yconf,modelsize,sc] = conformal(Xtrain,Ytrain,xnew,.1,'linear',ytrial);
%     fprintf(fileID,'Prediction interval is [%.2f,%.2f] with model size %.2f while real data is %.2f\n',...
%         min(yconf)/2+0.5,max(yconf)/2+0.5,modelsize,y/2+0.5);
%     if (min(yconf)<=y)&&(y<=max(yconf))
%         incounter=incounter+1;
%         fprintf(fileID,'Real data is IN\n');
%     else
%         fprintf(fileID,'Real data is OUT\n');
%     end
%     L = [L min(yconf)/2+0.5];
%     U = [U max(yconf)/2+0.5];
%     disp(i/(M-m));
end
plot(1:500,Ytot(test)/2+0.5,'bo','MarkerFaceColor','b');
set(gca, 'color', [.85 .85 .85]);
hold on;
plot([find(U1'-Ytot(test)/2-0.5<0)'...
    find(L1'-Ytot(test)/2-0.5>0)'],...
    Ytot(test(([find(U1'-Ytot(test)/2-0.5<0)'...
    find(L1'-Ytot(test)/2-0.5>0)'])))/2+0.5,'ro','MarkerFaceColor','r');
plot([find(U2'-Ytot(test)/2-0.5<0)'...
    find(L2'-Ytot(test)/2-0.5>0)'],...
    Ytot(test(([find(U2'-Ytot(test)/2-0.5<0)'...
    find(L2'-Ytot(test)/2-0.5>0)'])))/2+0.5,'ro','MarkerFaceColor','r');
for i=1:500
    pl1=line([i i], [L1(i) U1(i)],'LineWidth',2);
    pl2=line([i i], [L2(i) U2(i)],'LineWidth',2);
    pl3=line([i i], [max(L2(i),L1(i)) min(U1(i),U2(i))],'LineWidth',2);
    pl1.Color=([1,1,0,1]);pl2.Color =([0,1,1,1]);pl2.Color =([0,1,0,1]);
end
title('Conformal Prediction intervals');
legend([pl1,pl2,pl3],'LOO','OLS','Overlapping');
hold off;
fprintf(fileID,'The coverage is LOO:%.3f OLS:%.3f\n',incounter1/500,incounter2/500);
fprintf(fileID,'Average interval length is LOO:%.3f OLS:%.3f\n',mean(U1-L1),mean(U2-L2));
fprintf(fileID,'Median interval length is LOO:%.3f OLS:%.3f\n',median(U1-L1),median(U2-L2));
fprintf(fileID,'LOO model size %.2f\n',ms1);




