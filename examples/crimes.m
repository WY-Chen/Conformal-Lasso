%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\Github\Conformal-Lasso\examples\communities.data
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/04 13:23:01

%% Initialize variables.
filename = 'communities.data';
delimiter = ',';

%% Format string for each line of text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
communities = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
%% Initialize variables.
filename = 'communitiesnames.names';
delimiter = ' ';

%% Format string for each line of text:
%   column2: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
communitiesnames = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

% set up diary
t=randi(100);
folder = fullfile(pwd, '\Outputs');
filename = sprintf('crimerates_%d.txt',t);
fileID = fopen(fullfile(folder, filename),'w');
rng(t);

% set up data

communitiesnames = communitiesnames(6:end);
communities = communities(:,2:end);
data = communities;
data=data(:,~any(isnan(data)));

Ytotal = (data(:,end)-0.5)*2;
Xtotal = data(:,1:end-1);
Xtotal = (Xtotal-0.5)*2;
[M,p]=size(Xtotal);
m=294;

train = randsample(1:M,m);
Xtrain = Xtotal(train,:);
Ytrain = Ytotal(train);

test = setxor(1:M,train);
Xtest = Xtotal(test,:);
Ytest = Ytotal(test);

% test the data
incounter = 0;
L = [];
U = [];
for i=1:(M-m)
    xnew = Xtest(i,:);
    X_withnew = [Xtrain;xnew];
    y = Ytest(i);
    ytrial = -1:0.01:1;  
    
%     [yconf,modelsize,sc] = conformalLTSLassoAllSupp(Xtrain,Ytrain,xnew,.1,ytrial,0.2,0.8);
    [yconf,modelsize,sc] = conformalLOO(Xtrain,Ytrain,xnew,.1,ytrial,2);
    fprintf(fileID,'Prediction interval is [%.2f,%.2f] with model size %.2f while real data is %.2f\n',...
        min(yconf)/2+0.5,max(yconf)/2+0.5,modelsize,y/2+0.5);
    if (min(yconf)<=y)&&(y<=max(yconf))
        incounter=incounter+1;
        fprintf(fileID,'Real data is IN\n');
    else
        fprintf(fileID,'Real data is OUT\n');
    end
    L = [L min(yconf)/2+0.5];
    U = [U max(yconf)/2+0.5];
    disp(i/(M-m));
end
plot(1:200,Ytest(1:200)/2+0.5,'bo');
hold on;
plot([find(U(1:200)'-Ytest(1:200)/2-0.5<0)' find(L(1:200)'-Ytest(1:200)/2-0.5>0)'],...
    Ytest([find(U(1:200)'-Ytest(1:200)/2-0.5<0)' find(L(1:200)'-Ytest(1:200)/2-0.5>0)'])/2+0.5,'ro');
for i=1:200
    line([i i], [L(i) U(i)]);
end
title('Conformal Prediction intervals');
hold off;
fprintf(fileID,'The coverage is %.3f\n',incounter/(M-m));
fprintf(fileID,'Average interval length is %.3f\n',mean(U-L));
fclose(fileID);




